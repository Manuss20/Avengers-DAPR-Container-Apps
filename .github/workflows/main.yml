name: Build and deploy .NET application to Azure Container Apps

on:
  push:
    branches:
    - main
  workflow_dispatch:

env:
  
  # alphanumeric string under 14 characters
  RESOURCE_GROUP_NAME: avgstestng02

  # specify your preferred region
  REGION: westeurope

  AVENGERS_DOCKER: /src/Avengers/Dockerfile
  AVENGERS_IMAGE: avengers

  MISSION_DOCKER: /src/Avengers.MissionApi/Dockerfile
  MISSION_IMAGE: missions

  PAYMENT_DOCKER: /src/Avengers.PaymentApi/Dockerfile
  PAYMENT_IMAGE: payment

jobs:
  provision:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout to the branch
      uses: actions/checkout@main

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AzureSPN }}

    - name: Create resource group
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          echo "Creating resource group in Azure"
          echo "Executing 'az group create -l ${{ env.REGION }} -n ${{ env.RESOURCE_GROUP_NAME }}'"
          az group create -l ${{ env.REGION }} -n ${{ env.RESOURCE_GROUP_NAME }}

    - name: Creating resources
      uses: azure/arm-deploy@v1
      with:
        resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
        template: ./deploy/main.bicep
        failOnStdErr: false
        
  build:
    runs-on: ubuntu-latest
    needs: provision
    
    steps:

    - name: Checkout to the branch
      uses: actions/checkout@v2

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AzureSPN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to ACR
      run: |
        set -euo pipefail
        access_token=$(az account get-access-token --query accessToken -o tsv)
        refresh_token=$(curl https://${{ env.RESOURCE_GROUP_NAME }}.azurecr.io/oauth2/exchange -v -d "grant_type=access_token&service=${{ env.RESOURCE_GROUP_NAME }}.azurecr.io&access_token=$access_token" | jq -r .refresh_token)
        docker login -u 00000000-0000-0000-0000-000000000000 --password-stdin ${{ env.RESOURCE_GROUP_NAME }}.azurecr.io <<< "$refresh_token"
        
    - name: Build the missions api image and push it to ACR
      uses: docker/build-push-action@v2
      with:
        push: true
        file: ${{ env.MISSION_DOCKER }}
        tags: ${{ env.RESOURCE_GROUP_NAME }}.azurecr.io/${{ env.MISSION_IMAGE }}:${{ github.sha }}
        

    - name: Build the payment api image and push it to ACR
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ env.RESOURCE_GROUP_NAME }}.azurecr.io/${{ env.PAYMENT_IMAGE }}:${{ github.sha }}
        file: ${{ env.PAYMENT_DOCKER }}

    - name: Build the avengers app frontend image and push it to ACR
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ env.RESOURCE_GROUP_NAME }}.azurecr.io/${{ env.AVENGERS_IMAGE }}:${{ github.sha }}
        file: ${{ env.AVENGERS_DOCKER }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:

    - name: Checkout to the branch
      uses: actions/checkout@main

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AzureSPN }}

    - name: Installing Container Apps extension
      uses: azure/CLI@v1
      with:
        inlineScript: >
          az config set extension.use_dynamic_install=yes_without_prompt

          az extension add --name containerapp --yes

    - name: Login ACR
      uses: azure/CLI@v1
      with:
        inlineScript: >
          token=$(az acr login --name ${{ env.RESOURCE_GROUP_NAME }} --expose-token --output tsv --query accessToken)

          docker login ${{ env.RESOURCE_GROUP_NAME }}.azurecr.io --username 00000000-0000-0000-0000-000000000000 --password $token

    - name: Deploy Container Apps
      uses: azure/CLI@v1
      with:
        inlineScript: >
          az containerapp registry set -n missions -g ${{ env.RESOURCE_GROUP_NAME }} --server ${{ env.RESOURCE_GROUP_NAME }}.azurecr.io

          az containerapp update -n missions -g ${{ env.RESOURCE_GROUP_NAME }} -i ${{ env.RESOURCE_GROUP_NAME }}.azurecr.io/${{ env.MISSION_IMAGE }}:${{ github.sha }}

          az containerapp registry set -n payment -g ${{ env.RESOURCE_GROUP_NAME }} --server ${{ env.RESOURCE_GROUP_NAME }}.azurecr.io

          az containerapp update -n payment -g ${{ env.RESOURCE_GROUP_NAME }} -i ${{ env.RESOURCE_GROUP_NAME }}.azurecr.io/${{ env.PAYMENT_IMAGE }}:${{ github.sha }}

          az containerapp registry set -n avengers -g ${{ env.RESOURCE_GROUP_NAME }} --server ${{ env.RESOURCE_GROUP_NAME }}.azurecr.io
          
          az containerapp update -n avengers -g ${{ env.RESOURCE_GROUP_NAME }} -i ${{ env.RESOURCE_GROUP_NAME }}.azurecr.io/${{ env.AVENGERS_IMAGE }}:${{ github.sha }}

    - name: logout
      run: >
        az logout
